(function() {
  function Chessground(element, config) {
    this.element = element;
    this.config = config || {};
    this.init();
  }

  Chessground.prototype.init = function() {
    this.board = this.createBoard();
    this.element.appendChild(this.board);
    if (this.config.coordinates) {
      this.addCoordinates();
    }
  };

  Chessground.prototype.createBoard = function() {
    const board = document.createElement('div');
    board.classList.add('cg-board');
    for (let i = 0; i < 64; i++) {
      const square = document.createElement('div');
      square.classList.add('cg-square');
      board.appendChild(square);
    }
    return board;
  };

  Chessground.prototype.addCoordinates = function() {
    // Add coordinates around the board if needed
  };

  Chessground.prototype.set = function(config) {
    if (config.fen) {
      this.setFEN(config.fen);
    }
  };

  Chessground.prototype.setFEN = function(fen) {
    const squares = this.board.querySelectorAll('.cg-square');
    const pieceMap = {
      'r': 'bR', 'n': 'bN', 'b': 'bB', 'q': 'bQ', 'k': 'bK', 'p': 'bP',
      'R': 'wR', 'N': 'wN', 'B': 'wB', 'Q': 'wQ', 'K': 'wK', 'P': 'wP'
    };
    squares.forEach(square => {
      square.style.backgroundImage = '';
    });
    const rows = fen.split(' ')[0].split('/');
    rows.forEach((row, rowIndex) => {
      let colIndex = 0;
      for (const char of row) {
        if (isNaN(char)) {
          const piece = pieceMap[char];
          squares[rowIndex * 8 + colIndex].style.backgroundImage = `url('piezas/${piece}.svg')`;
          colIndex++;
        } else {
          colIndex += parseInt(char);
        }
      }
    });
  };

  window.Chessground = Chessground;
})();